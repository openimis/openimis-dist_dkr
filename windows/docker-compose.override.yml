version: "2.4"

services:
  #  in such context the database will not have enough memory, http://www.teamfoundation.co.za/2018/05/07/docker-linux-and-windows-event-more-3-from-containers-lcow/
  database:
    platform: windows
    container_name: openimis-db
    build:
      context: https://github.com/openimis/openimis-db_dkr.git#${DB_BRANCH:-main}:/
      dockerfile: Dockerfile_win
      args:
        - ACCEPT_EULA=${ACCEPT_EULA}
        - SA_PASSWORD=${DB_PASSWORD}
        - SQL_SCRIPT_URL=${DB_SQL_SCRIPT}
    environment:
        - ACCEPT_EULA=${ACCEPT_EULA}
        - SA_PASSWORD=${DB_PASSWORD}
        - SQL_SCRIPT_URL=${DB_SQL_SCRIPT}
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
    networks:
      - openimis-net
    
    healthcheck:
      test: ["CMD","sqlcmd","-U","$DB_USER","-P","$DB_PASSWORD","-d","$DB_NAME","-Q","SELECT 1"]
      interval: 30s
    ## WARNING:
    ## exposing the database port outside the openimis-net network
    ## may lead to security issue (depending on your network topology)
    ports:
      - 1433:1433
  backend:
    platform: windows
    container_name: openimis-backend
    build: 
      context: https://github.com/openimis/openimis-be_py.git#${BE_BRANCH:-main}:/
      dockerfile: Dockerfile_win
    command: start
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REMOTE_USER_AUTHENTICATION=True
      - SITE_ROOT=api
    networks:
      - openimis-net
    volumes:
      - "${BE_CONF_PATH}:/openimis-be/openimis.json"
      - "${DEV_PATH:-nul}:/openimis-dev"
    depends_on:
      database:
        condition: service_healthy
      ibackend:
        condition: service_healthy
    healthcheck:
      test:  ["CMD","powershell","-Command","/openimis-be/script/healthcheck.ps1"]
      interval: 1m
      timeout: 5m
    ## WARNING:
    ## exposing the backend port outside the openimis-net network
    ## may lead to security issue (depending on your network topology)
    # ports:
    #  - 8000:8000
    ## OPTION:
    ## if you want to ensure the (demo) db is started prior to backend,
    ## simply add the following dependency
    # depends_on:
    #   - db
  frontend:
    platform: windows
    container_name: openimis-frontend
    build:
      context: https://github.com/openimis/openimis-fe_js.git#${FE_BRANCH:-main}:/
      dockerfile: Dockerfile_win
    command: C:\\Users\\ContainerAdministrator\\AppData\\Local\\Yarn\\bin\\serve -s build
    environment:
      - REACT_APP_API_URL=/iapi
    networks:
      - openimis-net
    volumes:
      - "${FE_CONF_PATH}:/openimis-be/openimis.json"
      - "${DEV_PATH:-nul}:/openimis-dev"  
    ## WARNING:
    ## exposing the frontend port outside the openimis-net network
    ## may lead to security issue (depending on your network topology)
    # ports:
    #  - 5000:5000
  ibackend:
    platform: windows
    container_name: openimis-ibackend
    build: 
      context: https://github.com/openimis/openimis-be_py.git#${BE_BRANCH:-main}:/
      dockerfile: Dockerfile_win
    command: start
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REMOTE_USER_AUTHENTICATION=True
      - SITE_ROOT=iapi
    networks:
      - openimis-net
    ports:
      - 8000:8000
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test:  ["CMD","powershell","-Command","c:/openimis-be/script/healthcheck.ps1"]
      interval: 1m
      timeout: 5m
    volumes:
      - "${BE_CONF_PATH}:/openimis-be/openimis.json"
      - "${DEV_PATH:-nul}:/openimis-dev"
  gateway:
    platform: windows
    container_name: openimis-gateway
    build:
      context: https://github.com/openimis/openimis-gateway_dkr.git#${GW_BRANCH:-main}:/
      dockerfile: Dockerfile_win
      shm_size: '4gb'
    environment:
      - NEW_OPENIMIS_HOST=${NEW_OPENIMIS_HOST}
      - LEGACY_OPENIMIS_HOST=${LEGACY_OPENIMIS_HOST}
   # command:
    networks:
      - openimis-net
    ports:
      - 80:80
      - 443:443
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
      ibackend:
        condition: service_healthy
      
#    volumes:
#      - C:/Users/delcpa/Development/openimis-fe_js/conf:c:/openresty/conf
  frontend:
    platform: windows
    container_name: openimis-frontend
    build:
      context: https://github.com/openimis/openimis-fe_js.git#${FE_BRANCH:-main}:/
      dockerfile: Dockerfile_win
      shm_size: '4gb'
    environment:
      - DB_PASS=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
    volumes:
    #   - vol_photo_updated:/inetpub/wwwroot/openIMIS/Images/Updated:rw
    #   - vol_photo_submitted:/inetpub/wwwroot/openIMIS/Images/Submitted:rw
      - "${BE_CONF_PATH}:/openimis-fe/openimis.json"
      - "${DEV_PATH:-nul}:/openimis-dev"
    networks:
      - openimis-net
# volumes:
#   vol_photo_updated:
#   vol_photo_submitted:
networks:
  openimis-net: